<!--- 
	Filename: checkout.cfm 
	Created by:  Matt Barfoot on 25/05/2006 Clearview Webmedia Limited
	Purpose:   checks out a shopper
	
	Template Description
	---------------------------------------------------------------------
	
	Order status
	---------------------------------------------------------------------
	session.shopper.orderStatus is used to track an order through 5 states
	1) "": order has not been submitted
	2) "submitted": checkout form has been submitted
	3) "saved": order saved to webdatabase
	4) "processing": order in progress of being sent to Sage via https
	5) "paymentDeclined": payment not accepted 
	6)  "complete": order saved and order number returned
	
	
	On submission a "web order"  is generated by creating a UUID and timestamp is also saved to logging. 
	If an order is interrupted but has been saved to the database, then an error page will be displayed
	this order will be flagged and an email sent to VE staff to check order and if necessary manually
    "complete" this order. 
	
	Order transfer and payment processing
	---------------------------------------------------------------------------------------
	If an order is submitted and is ready to processed a "processing" view is grabbed from
	departments.view and the rest of the processing is done at the bottom of the page
	after the output is flushed. 
	
	After processing or interupption
	-----------------------------------------------------------------------------------------
	A meta redirect is used to reload this page after processing is complete. The order.save 
	process will have set the orderstatus to complete (or saved | processing if order interuppted
	by user).
	
--->

<cfprocessingdirective suppresswhitespace="true">
<!--- / Page Defaults / --->
<cfparam name="url.action" default="" />
<cfparam name="session.shopper.orderStatus" default="" />
<cfparam name="session.shopper.orderID" default="#createUUID()#" />
<cfparam name="session.shopper.WebOrderRef" default="#right(session.shopper.orderID, 6)#" />
<cfparam name="session.shopper.orderTS" default="#getTickCount()#" />
<cfparam name="session.shopper.orderError" default="" />

<cfscript>
//utility object
APPLICATION.shop.util = createObject("component", "cfc.shop.util");

// get the security control centre object
request.seccontrol = createObject("component", "cfc.security.control");

//make sure customer is logged in before they can access this page
request.seccontrol.forceLogin();

// create the departements view object
request.departments.view=createObject("component", "cfc.departments.view");



//check for empty basket
if (session.shopper.basket.getGrandTotal() eq 0) {
	session.shopper.orderStatus="emptybasket";
}

//check for minimum order value
if (session.shopper.basket.getGrandTotal() lt SESSION.Auth.mov) {
    session.shopper.orderStatus="lessthanmov";
}


//form handler
if (isdefined("form.frmSubmitCheckOut")) {

	//check resubmission of form
	if (session.shopper.orderstatus eq "") {

		session.shopper.orderStatus		= "submitted";
	}
		
		/* if the credit card form has been used save the data so if payment
		 is not authorised the shopper doesn't have to fill in lots of details again */
	if (isdefined("form.customer")) {
		session.shopper.card_type		= form.card_type;
		session.shopper.customer		= form.customer;
		session.shopper.billBuilding	= form.billBuilding;
		session.shopper.billPostcode	= form.billPostcode;
		session.shopper.billLine1		= form.billLine1;
		session.shopper.billLine2		= form.billLine2;
		session.shopper.billLine3		= form.billLine3;
		session.shopper.billTown		= form.billTown;
		session.shopper.billCounty 		= form.billCounty;
	}
	
	
} 

/* if processing order create the favourites data object so that favourites list
can be updated if order is partially or fully complete */
if (session.shopper.orderStatus neq "") {
	// get the Favourites Data Object
	request.fav_do=createObject("component", "cfc.shopper.fav_do").init();
}


switch (session.shopper.orderStatus) {
		// shopper has submitted form
		case "emptybasket": content = request.departments.view.emptyBasket();	
						    //reset orderstatus
						    session.shopper.orderStatus="";
						    ;
						    break;
        case "lessthanmov": content = request.departments.view.mov();
                            session.shopper.orderStatus="";
                            ;
                            break;
// shopper has submitted form
		case "submitted": case "processing": 	content = request.departments.view.orderProcessing();
						    //nothing more to do, processing done at end of template after flush!
						    ;
						    break;	
		
		// shopper has resubmitted during after order has been saved to database or is being 
		// transferred to sage
		case "NotPostedToSage":		
						    // include error page
							// get the checkout form, passing whether the user has a credit account
							content = request.departments.view.orderError();		
						    
						    //reset orderstatus to allow shopper to continue with another order
							session.shopper.orderStatus	="";
						    
						    //update favourites
						    request.fav_do.listAddFavourite(session.shopper.basket.ListOfProductIDs(), session.shopper.basket.ListOfQuantities());
								    
						    //clear shopping basket
						    session.shopper.basket.empty();
						    
						    ;
						    break;	
		
		//payment declined
		case "paymentDeclined":  		
						    //check again whether authorised for credit
							isCreditAuthorised = request.seccontrol.isCreditAuthorised();
		
							// if using the credit card and billing form include the ccform javascript file
							if (NOT isCreditAuthorised) {
							request.js = "/js/ccform.js" & "," & "/js/formUI.js" & "," & "/js/pcs_cc.js";	
							}
		
							// get the checkout form, passing whether the user has a credit account
							content = request.departments.view.checkOutForm(isCreditAuthorised, true);
							;
							break;
		
		/* partial complete: payment gateway not enabled or sage gateway not enabled
		Order is saved to database for manual processing. CronJob picks up orders
		which need to processed manually and emails to VE staff */
		case "paymentIncomplete": content = request.departments.view.orderPartComplete();
		
						   //reset orderstatus to allow shopper to continue with another order
							session.shopper.orderStatus	="";
						    
						    //update favourites
						    request.fav_do.listAddFavourite(session.shopper.basket.ListOfProductIDs(), session.shopper.basket.ListOfQuantities());
						    
						    //clear shopping basket
						    session.shopper.basket.empty();
						    
						    ;
						    break;
		
		
		// order is complete, get thanks page and clear variables
		case "complete": 	content = request.departments.view.orderComplete();		
						    
						     //reset orderstatus to allow shopper to continue with another order
							session.shopper.orderStatus	="";
						    
						    //update favourites
						    request.fav_do.listAddFavourite(session.shopper.basket.ListOfProductIDs(), session.shopper.basket.ListOfQuantities());
						    
						    //clear shopping basket
						    session.shopper.basket.empty();
						    
						    ;
						    break;	
		
		
		// shopper is checking out, display the checkout form
		default:    		/* check whether they have an account, use realtime query on database in
							case VE staff member has updated their account during course of session */
							
							// by default assume they have credit, don't need credit card form
							isCreditAuthorised = request.seccontrol.isCreditAuthorised();
							//is the account on Hold
							isAccountOnHold = request.seccontrol.isAccountOnHold();
							
							// if using the credit card and billing form include the ccform javascript file
							if (NOT isCreditAuthorised) {
								request.js = "/js/ccform.js" & "," & "/js/formUI.js" & "," & "/js/pcs_cc.js";	
							} else {
								request.js = "/js/formUI.js";
							}
														
							// check whether the account is on hold 
							if (isAccountOnHold) {
								isCreditAuthorised = false;
								request.js = "/js/ccform.js" & "," & "/js/formUI.js" & "," & "/js/pcs_cc.js";	
							} else {
								request.js = "/js/formUI.js";
							}
							
							// get the checkout form, passing whether the user has a credit account
							content = request.departments.view.checkOutForm(isCreditAuthorised);			

				   			; // end of default case
}





		
//add the css file
if (isdefined("request.css")) {
	request.css=request.css & "," & session.shop.skin.path & "checkout.css";
} else {
	request.css= session.shop.skin.path & "checkout.css";
}

// request the default view
//request.util.include("/views/default.cfm");
//writeOutput(content);
</cfscript>

<cfinclude template="/views/default.cfm">



<cfscript>

/******************************************************************
/ --------------------Order processing --------------------------- /
*******************************************************************/

//has the form been submitted and orders status set to "submitted"
if (isdefined("form.frmSubmitCheckOut") AND session.shopper.orderStatus eq "submitted") {

    session.shopper.orderStatus="processing";
    WriteOutput('<script>location.reload();</script>');
    APPLICATION.shop.util.flush();

}

if (isdefined("form.frmSubmitCheckOut") AND session.shopper.orderStatus eq "processing") {

    APPLICATION.shop.util.flush();

    // initalise order handler object
    request.order = createObject("component", "cfc.shop.order").init();

    //save the order
    request.order.save(FORM);

    WriteOutput('<script>location.reload();</script>');

}


</cfscript>




</cfprocessingdirective>